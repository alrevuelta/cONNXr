//this file was generated by ../../../../../../scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__CLIP__12_H
# define OPERATOR_OPERATOR__AI_ONNX__CLIP__12_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Clip' version 12
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Clip operator limits the given input within an interval. The interval is
 * specified by the inputs 'min' and 'max'. They default to
 * numeric_limits::lowest() and numeric_limits::max(), respectively.
 * 
 * Constraint T:
 *   Constrain input and output types to all numeric tensors.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_uint16,
 *                  tensor_uint32, tensor_uint64, tensor_uint8
 * Input T input:
 *   Input tensor whose elements to be clipped
 *   Allowed Types: tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_uint16,
 *                  tensor_uint32, tensor_uint64, tensor_uint8
 * 
 * Input T min:
 *   Minimum value, under which element is replaced by min. It must be a
 *   scalar(tensor of empty shape).
 *   Allowed Types: tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_uint16,
 *                  tensor_uint32, tensor_uint64, tensor_uint8
 * 
 * Input T max:
 *   Maximum value, above which element is replaced by max. It must be a
 *   scalar(tensor of empty shape).
 *   Allowed Types: tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_uint16,
 *                  tensor_uint32, tensor_uint64, tensor_uint8
 * Output T output:
 *   Output tensor with clipped input elements
 *   Allowed Types: tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_uint16,
 *                  tensor_uint32, tensor_uint64, tensor_uint8

 *
 * @since version 12
 *
 * @see io/onnx/onnx/defs/math/defs.cc:777
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Clip
 */
operator_status operator__ai_onnx__clip__12(
    node_context *ctx
);
operator_status operator__ai_onnx__clip__12__T_tensor_double(
    node_context *ctx
);
operator_status operator__ai_onnx__clip__12__T_tensor_float(
    node_context *ctx
);
operator_status operator__ai_onnx__clip__12__T_tensor_float16(
    node_context *ctx
);
operator_status operator__ai_onnx__clip__12__T_tensor_int16(
    node_context *ctx
);
operator_status operator__ai_onnx__clip__12__T_tensor_int32(
    node_context *ctx
);
operator_status operator__ai_onnx__clip__12__T_tensor_int64(
    node_context *ctx
);
operator_status operator__ai_onnx__clip__12__T_tensor_int8(
    node_context *ctx
);
operator_status operator__ai_onnx__clip__12__T_tensor_uint16(
    node_context *ctx
);
operator_status operator__ai_onnx__clip__12__T_tensor_uint32(
    node_context *ctx
);
operator_status operator__ai_onnx__clip__12__T_tensor_uint64(
    node_context *ctx
);
operator_status operator__ai_onnx__clip__12__T_tensor_uint8(
    node_context *ctx
);

operator_executer resolve_operator__ai_onnx__clip__12(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx__clip__12;
# endif