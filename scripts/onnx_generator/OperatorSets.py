from .Template import Template
import re

class OperatorSetEntry(Template):
    _template = '''
{{
  .name = "{name}",
  .resolver = (operator_resolver) resolve_{operator_name},
  .info = &info_{operator_name}
}}
'''
    def __init__(self, schema):
        self.schema = schema
        self.name = schema.name
        self.operator_name = schema.operator_name


class OperatorSet(Template):
    _template = '''
operator_set {name} = {{
  .version = {version},
  .domain  = "{domain}",
  .length  = {length},
  .entries = {{
    {entries}
  }}
}};
'''

    def __init__(self, domain, version, schemas):
        self.domain = domain
        domain_sane = re.sub("\W","_",domain)
        self.version = version
        self.schemas = schemas
        self.name = f"operator_set__{domain_sane}__{version}"
        self.length = len(schemas)
        self.entries = ",".join([ str(OperatorSetEntry(s)) for s in self.schemas ])

class Source(Template):
    _basepath = "{path}"
    _filepath = "operator_sets.c"
    _template = '''
//this file was generated by {scriptpath}
#include "operators/operator_sets.h"

{includes}

{sets}

operator_sets all_operator_sets = {{
  .length = {length},
  .sets   = {{
    {set_refs}
  }}
}};
'''

    def __init__(self, headers, path):
        self.headers = headers
        self.path = path

        sets = []
        versions = set()
        domain2name2version2schema = {}
        for header in self.headers:
            schema = header.schema
            name2version2schema = domain2name2version2schema.setdefault(schema.domain,{})
            name2version2schema.setdefault(schema.name,{})[schema.version] = schema
            versions.add(schema.version)

        for version in versions:
            for domain, name2version2schema in domain2name2version2schema.items():
                tmp = []
                for name, version2schema in name2version2schema.items():
                    for v in range(version, 0, -1):
                        if v in version2schema:
                            tmp.append(version2schema[v])
                            break;
                # print(sets, domain, version, tmp)
                sets.append(OperatorSet(domain, version, tmp))



        self.includes = "\n".join([ f'#include "operators/{h.filepath(False,False)}"' for h in self.headers ])
        self.sets = "\n\n".join([ str(s) for s in sets])
        self.length = len(sets)
        self.set_refs = ",\n".join([f"&{s.name}" for s in sets])

