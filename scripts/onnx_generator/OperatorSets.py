from .Template import Template
import re

class SourceOperatorVersion(Template):
    _basepath = "{path}"
    _filepath = "{schema.domain}/{schema.name}/{schema.version}/opversion_{operator_name}.c"
    _template = '''
//this file was generated by {scriptpath}

#include "operators/operator_set.h"
#include "operators/{schema.domain}/{schema.name}/{schema.version}/{schema.operator_name}.h"

operator_set_opversion opversion_{operator_name} = {{
    .version  = {version},
    .preparer = prepare_{operator_name},
    .info = &info_{operator_name}
}};
'''
    def __init__(self, schema, path):
        self.path = path
        self.schema = schema
        self.version = schema.version
        self.name = schema.name
        self.operator_name = schema.operator_name


class HeaderOperatorVersion(Template):
    _basepath = "{path}"
    _filepath = "{schema.domain}/{schema.name}/{schema.version}/opversion_{schema.operator_name}.h"
    _template = '''
//this file was generated by {scriptpath}

#ifndef {header}
#define {header}

#include "operators/operator_set.h"

extern operator_set_opversion opversion_{schema.operator_name};

#endif
'''
    def __init__(self, schema, path):
        self.schema = schema
        self.path = path
        self.header = re.sub(r"\W", "_", self.filepath().parts[-1].upper())

class SourceOperator(Template):
    _basepath = "{path}"
    _filepath = "{domain}/{name}/opname_operator__{_domain}__{_name}.c"
    _template = '''
//this file was generated by {scriptpath}

#include "operators/operator_set.h"
{includes}

operator_set_opname opname_operator__{_domain}__{_name} = {{
    .name = "{name}",
    .opversions = {{
        {entries}
        NULL
    }}
}};
'''
    def __init__(self, domain, name, schemas, path):
        self.path = path
        self.name    = name
        self.schemas = schemas
        self.domain = domain

        self._domain = re.sub(r"\W", "_",domain).lower()
        self._name = re.sub(r"\W", "_",name).lower()

        entries = []
        includes = []
        for s in schemas:
            entries.append(f"&opversion_{s.operator_name},")
            includes.append(f'#include "operators/{s.domain}/{s.name}/{s.version}/opversion_{s.operator_name}.h"')
        self.entries = "\n        ".join(entries)
        self.includes = "\n".join(includes)

class HeaderOperator(Template):
    _basepath = "{path}"
    _filepath = "{domain}/{name}/opname_operator__{_domain}__{_name}.h"
    _template = '''
//this file was generated by {scriptpath}

#ifndef {header}
#define {header}

#include "operators/operator_set.h"

extern operator_set_opname opname_operator__{_domain}__{_name};

#endif
'''
    def __init__(self, domain, name, path):
        self.path = path
        self.domain = domain
        self._domain = re.sub(r"\W", "_",domain).lower()
        self.name = name
        self._name = re.sub(r"\W", "_",name).lower()
        self.header = re.sub(r"\W", "_", self.filepath().parts[-1].upper())

class SourceDomain(Template):
    _basepath = "{path}"
    _filepath = "{domain}/opdomain_operator__{_domain}.c"
    _template = '''
//this file was generated by {scriptpath}

#include "operators/operator_set.h"
{includes}

operator_set_opdomain opdomain_operator__{_domain} = {{
    .name = "{domain}",
    .opnames = {{
        {entries}
        NULL
    }}
}};
'''
    def __init__(self, domain, operators, path):
        self.path = path
        self.domain = domain
        self._domain = re.sub(r"\W", "_",domain).lower()
        self.operators = operators
        entries = []
        includes = []
        for op in operators:
            _op = re.sub(r"\W", "_",op).lower()
            entries.append(f"&opname_operator__{self._domain}__{_op},")
            includes.append(f'#include "operators/{domain}/{op}/opname_operator__{self._domain}__{_op}.h"')
        self.entries = "\n        ".join(entries)
        self.includes = "\n".join(includes)

class HeaderDomain(Template):
    _basepath = "{path}"
    _filepath = "{domain}/opdomain_operator__{_domain}.h"
    _template = '''
//this file was generated by {scriptpath}

#ifndef {header}
#define {header}

#include "operators/operator_set.h"

extern operator_set_opdomain opdomain_operator__{_domain};

#endif
'''
    def __init__(self, domain, path):
        self.path = path
        self.domain = domain
        self._domain = re.sub(r"\W", "_",domain).lower()
        self.header = re.sub(r"\W", "_", self.filepath().parts[-1].upper())

class OperatorSet(Template):
    _basepath = "{path}"
    _filepath = "operator_set.c"
    _template = '''
//this file was generated by {scriptpath}

#include "operators/operator_set.h"
{includes}

operator_set_opdomain *operator_set[] = {{
        {entries}
        NULL
}};
'''

    def __init__(self, domains, path):
        self.path = path
        self.domains = domains
        entries = []
        includes = []
        for domain in domains:
            _domain = re.sub(r"\W", "_",domain).lower()
            entries.append(f"&opdomain_operator__{_domain},")
            includes.append(f'#include "operators/{domain}/opdomain_operator__{_domain}.h"')
        self.entries = "\n        ".join(entries)
        self.includes = "\n".join(includes)

class Sets(Template):
    def __init__(self, schemas, path):
        self.schemas = schemas
        self.path = path

        sets = []
        versions = set()
        self.domain2name2version2schema = {}
        for schema in self.schemas:
            name2version2schema = self.domain2name2version2schema.setdefault(schema.domain,{})
            name2version2schema.setdefault(schema.name,{})[schema.version] = schema
            versions.add(schema.version)

    def __iter__(self):
        yield OperatorSet(self.domain2name2version2schema.keys(), self.path)
        for domain, name2version2schema in self.domain2name2version2schema.items():
            yield SourceDomain(domain, name2version2schema.keys(), self.path)
            yield HeaderDomain(domain, self.path)
            for name, version2schema in name2version2schema.items():
                yield SourceOperator(domain, name, version2schema.values(), self.path)
                yield HeaderOperator(domain, name, self.path)
                for schema in version2schema.values():
                    yield SourceOperatorVersion(schema, self.path)
                    yield HeaderOperatorVersion(schema, self.path)




