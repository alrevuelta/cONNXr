from .Template import Template


class StubDeclaration(Template):
    _template = '''
{attribute}
{return_type}
{prefix}{name}{suffix}(
    node_context *ctx
)
{{
    return OP_ENOSYS;
}}
'''
    def __init__(self, name, prefix="",suffix="", return_type="operator_status", attribute=""):
        self.prefix = prefix
        self.name = name
        self.suffix = suffix
        self.attribute = attribute
        self.return_type = return_type

class Source(Template):
    _basepath = "{path}"
    _filepath = "{schema.domain}/{schema.operator_name}{suffix}.c"
    _template = '''
//this file was generated by {scriptpath}
{include}

{content}
'''

    def __init__(self, header, path, suffix='', content=None):
        self.header = header
        self.path = path
        self.schema = header.schema
        self.suffix = suffix
        self.include = f'#include "operators/{header.filepath(False,False)}"'

        if not content:
            stubs = [StubDeclaration(self.schema.operator_name)]
            stubs += [StubDeclaration(self.schema.operator_name,suffix=f"__{t}") for t in self.schema.constraints.typePermutations(filterInput=True)]
            self.content = "\n\n".join((str(stub) for stub in stubs))
        else:
            self.content = content

class Sources:
    def __init__(self, header, path):
        self.header = header
        self.path = path
        self.schema = header.schema

    def __iter__(self):
        stub = StubDeclaration(self.schema.operator_name)
        yield Source(self.header, self.path, content=stub)

        types = self.schema.constraints.typePermutations(filterInput=True)
        for t in types:
            stub = StubDeclaration(self.schema.operator_name, suffix=f"__{t}")
            yield Source(self.header, self.path, content=stub, suffix=f"__{t}")
